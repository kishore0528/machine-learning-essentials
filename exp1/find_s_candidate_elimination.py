# -*- coding: utf-8 -*-
"""find-s-candidate-elimination.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NICWrTw8OpDSaqQw1gyQYweYrF36Ao6j
"""

import pandas as pd
import numpy as np

# --- Customer Purchase Dataset (10 records) ---
data = [
    ['Young', 'Male', 'Low', 'Clothing', 'Weekend', 'Yes'],
    ['Young', 'Male', 'Medium', 'Clothing', 'Weekday', 'Yes'],
    ['Old', 'Female', 'High', 'Accessories', 'Weekend', 'No'],
    ['Young', 'Male', 'Medium', 'Clothing', 'Weekend', 'Yes'],
    ['Middle', 'Male', 'Low', 'Clothing', 'Weekend', 'Yes'],
    ['Old', 'Male', 'High', 'Accessories', 'Weekday', 'No'],
    ['Young', 'Male', 'Low', 'Clothing', 'Weekday', 'Yes'],
    ['Young', 'Female', 'Low', 'Clothing', 'Weekend', 'No'],
    ['Young', 'Male', 'Medium', 'Clothing', 'Weekend', 'Yes'],
    ['Middle', 'Male', 'Medium', 'Clothing', 'Weekend', 'Yes']
]

df = pd.DataFrame(data, columns=['Age', 'Gender', 'Income', 'Category', 'Day', 'Purchase'])

# --- FIND-S ---
def findS(df):
    concept = df.iloc[:, :-1].values
    target = df.iloc[:, -1].values
    h = concept[0].copy()
    for i, val in enumerate(target):
        if val == 'Yes':
            for j in range(len(h)):
                if concept[i][j] != h[j]:
                    h[j] = '?'
    return h

# --- CANDIDATE ELIMINATION ---
def candidateElimination(df):
    concept = df.iloc[:, :-1].values
    target = df.iloc[:, -1].values
    n = len(concept[0])
    S = concept[0].copy()
    G = [['?' for _ in range(n)]]

    for i, val in enumerate(target):
        if val == 'Yes':
            for j in range(n):
                if S[j] != concept[i][j]:
                    S[j] = '?'
            G = [g for g in G if all(g[k] == '?' or g[k] == S[k] for k in range(n))]
        else:
            G_new = []
            for g in G:
                for j in range(n):
                    if g[j] == '?':
                        new_g = g.copy()
                        new_g[j] = concept[i][j]
                        if all(new_g[k] == '?' or new_g[k] == S[k] or S[k] == '?' for k in range(n)):
                            G_new.append(new_g)
            G += G_new
            G = [list(x) for x in set(tuple(x) for x in G)]  # remove duplicates
    return S, G

# --- Run algorithms ---
S, G = candidateElimination(df)
print("Find-S:", findS(df))
print("\nCandidate Elimination:")
print("Specific Boundary:", [list(S)])
print("General Boundary (as matrix):")
for row in G:
    print(row)

import pandas as pd
import numpy as np

# Customer purchase dataset
dataset = [
    ['Young', 'Male', 'Low', 'Clothing', 'Weekend', 'Yes'],
    ['Young', 'Male', 'Medium', 'Clothing', 'Weekday', 'Yes'],
    ['Old', 'Female', 'High', 'Accessories', 'Weekend', 'No'],
    ['Young', 'Male', 'Medium', 'Clothing', 'Weekend', 'Yes']
]

df = pd.DataFrame(dataset, columns=['Age', 'Gender', 'Income', 'Category', 'Day', 'Purchase'])

# --- FIND-S ALGORITHM ---
def findS(df):
    concept = df.iloc[:, :-1].values
    target = df.iloc[:, -1].values
    h = concept[0].copy()
    for i, val in enumerate(target):
        if val == 'Yes':
            for j in range(len(h)):
                if concept[i][j] != h[j]:
                    h[j] = '?'
    return h

# --- CANDIDATE ELIMINATION ALGORITHM ---
def candidateElimination(df):
    concept = df.iloc[:, :-1].values
    target = df.iloc[:, -1].values
    n = len(concept[0])
    G = [['?' for _ in range(n)]]
    S = np.array(['0'] * n)

    for i, val in enumerate(target):
        if val == 'Yes':
            if np.all(S == '0'):
                S = concept[i].copy()
            for j in range(n):
                if S[j] != concept[i][j]:
                    S[j] = '?'
            G = [g for g in G if all(g[k] == '?' or S[k] == '?' or g[k] == S[k] for k in range(n))]
        else:
            G_new = []
            for g in G:
                for j in range(n):
                    if g[j] == '?':
                        new_g = g.copy()
                        new_g[j] = concept[i][j]
                        G_new.append(new_g)
            G += G_new
    return S, G

print("Find-S:", findS(df))
print("Candidate Elimination:", candidateElimination(df))