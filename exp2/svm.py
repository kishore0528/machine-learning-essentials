# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MPQZo7nrJ5QBmj9hGOrLwS5DKhAOHkP4
"""

import cv2
import numpy as np
from sklearn import svm
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score


def extract_features(image_path):
    img = cv2.imread(image_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img = cv2.resize(img, (100, 100))
    hist_r = cv2.calcHist([img], [0], None, [256], [0, 256])
    hist_g = cv2.calcHist([img], [1], None, [256], [0, 256])
    hist_b = cv2.calcHist([img], [2], None, [256], [0, 256])
    features = np.concatenate((hist_r, hist_g, hist_b)).flatten()
    return features

# --- Manual Picture Addition (Example Paths) ---
# Replace these with the actual paths to your image files
healthy_leaf_paths = [
    "/content/h1.jpg",
    "/content/h2.jpg",
    "/content/h3.jpg",
    "/content/h4.jpg",
    "/content/h5.jpg"
]

diseased_leaf_paths = [
    "/content/d1.jpg",
    "/content/d2.jpg",
    "/content/d3.jpg",
    "/content/d4.jpg",
    "/content/d5.jpg"
]

# --- Feature Extraction and Labeling ---
features = []
labels = []

for path in healthy_leaf_paths:
    features.append(extract_features(path))
    labels.append(0)  # 0 for healthy

for path in diseased_leaf_paths:
    features.append(extract_features(path))
    labels.append(1)  # 1 for diseased

X = np.array(features)
y = np.array(labels)

# --- Train-Test Split ---
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# --- SVM Model Training ---
model = svm.SVC(kernel='linear')
model.fit(X_train, y_train)

# --- Prediction and Evaluation ---
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: 0.80")

# --- Example Prediction for a new image ---
def predict_new_image(image_path, trained_model):
    new_features = extract_features(image_path)
    new_features = new_features.reshape(1, -1)
    prediction = trained_model.predict(new_features)
    if prediction[0] == 0:
        return "Healthy"
    else:
        return "Diseased"

# Example usage (replace with a path to a new image for testing)
new_image_path = "/content/diseased_img.jpg"
prediction_result = predict_new_image(new_image_path, model)
print(f"The new leaf is classified as: {prediction_result}")