# -*- coding: utf-8 -*-
"""K-means-EM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14LspN5FzZKC63jT2BtLiOpppYmk-JXxV
"""

import pandas as pd
from sklearn.cluster import KMeans
from sklearn.mixture import GaussianMixture
from sklearn.metrics import silhouette_score

# --- Load dataset ---
data = pd.read_csv("patient_data1.csv")
X = data[['Age', 'Glucose', 'BloodPressure', 'Insulin', 'BMI']]

# --- K-Means ---
kmeans = KMeans(n_clusters=3, random_state=42)
k_labels = kmeans.fit_predict(X)
k_score = silhouette_score(X, k_labels)

# --- EM (Gaussian Mixture Model) ---
gmm = GaussianMixture(n_components=3, random_state=42)
g_labels = gmm.fit_predict(X)
g_score = silhouette_score(X, g_labels)

# --- Compare and Display Results ---
print(f"K-Means Silhouette Score: {k_score:.3f}")
print(f"EM (GMM) Silhouette Score: {g_score:.3f}")

if g_score > k_score:
    print("\n✅ EM (Gaussian Mixture) performs better.")
    data['Cluster'] = g_labels
else:
    print("\n✅ K-Means performs better.")
    data['Cluster'] = k_labels

# --- Simple Treatment Plan based on Clusters ---
for c in range(3):
    group = data[data['Cluster'] == c]
    avg_age = group['Age'].mean()
    avg_glucose = group['Glucose'].mean()
    avg_bp = group['BloodPressure'].mean()
    avg_insulin = group['Insulin'].mean()
    avg_bmi = group['BMI'].mean()

    print(f"\nCluster {c+1} — Avg(Age): {avg_age:.1f}, Glucose: {avg_glucose:.1f}, BP: {avg_bp:.1f}, "
          f"Insulin: {avg_insulin:.1f}, BMI: {avg_bmi:.1f}")

    if avg_glucose > 160 or avg_bmi > 28 or avg_bp > 90:
        print("  → Suggested Treatment: Intensive care + glucose & weight control")
    elif avg_glucose > 130:
        print("  → Suggested Treatment: Mild medication + balanced diet + exercise")
    else:
        print("  → Suggested Treatment: Routine check-up only")